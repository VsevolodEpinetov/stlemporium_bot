const { Composer, Markup } = require("telegraf");
const SETTINGS = require('../../../settings.json')
const util = require('../../util')
const emporiumUtils = require('../util.js')

module.exports = Composer.action(/^action-change-bg-any-[0-9]+$/g, async ctx => {
  util.log(ctx)
  const crID = ctx.callbackQuery.data.split('action-change-bg-any-')[1];
  if (ctx.globalSession.emporium.queue[crID]) {

    const queueData = ctx.globalSession.emporium.queue[crID];
    if (ctx.callbackQuery.from.id != SETTINGS.CHATS.EPINETOV && ctx.callbackQuery.from.id != SETTINGS.CHATS.ANN && ctx.callbackQuery.from.id != queueData.whoMade) {
      ctx.answerCbQuery('–¢—ã –Ω–µ –º–æ–∂–µ—à—å —ç—Ç–æ –¥–µ–ª–∞—Ç—å')
      return;
    }

    ctx.deleteMessage(queueData.lastBotMessageId).catch(e => {
      console.log(e)
    })
    ctx.reply('–ú–µ–Ω—è—é —Ñ–æ–Ω...')
    try {
      const creatureData = queueData.data;
      const pathToBaseImage = await emporiumUtils.getRandomBaseImageRacesAndClasses(creatureData.races, creatureData.classes)
      const resultImageBuffer = await emporiumUtils.placePngAndGetPic(ctx, queueData.transparentFileId, pathToBaseImage)
      ctx.globalSession.emporium.queue[crID].data.preview = {
        buffer: resultImageBuffer
      }
      ctx.replyWithDocument({ source: resultImageBuffer, filename: `${creatureData.code}.png` }, {
        caption: `–î–∞–Ω–Ω—ã–µ\n\n–†–∞—Å—ã: ${creatureData.races.join(', ')}\n–ö–ª–∞—Å—Å—ã: ${creatureData.classes.join(', ')}\n–û—Ä—É–∂–∏–µ: ${creatureData.weapons.join(', ')}\n\n–°—Ç—É–¥–∏—è: ${creatureData.studioName}\n–†–µ–ª–∏–∑: ${creatureData.releaseName}\n–ö–æ–¥:${creatureData.code}\n\n–ü–æ–ª: ${creatureData.sex}`,
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [
            Markup.button.callback('‚öîÔ∏è –§–æ–Ω –∫–ª–∞—Å—Å', `action-change-bg-classes-${crID}`),
            Markup.button.callback('üßù‚Äç‚ôÄÔ∏è –§–æ–Ω —Ä–∞—Å–∞', `action-change-bg-races-${crID}`),
          ],
          [ 
            Markup.button.callback('‚öîÔ∏èüßù‚Äç‚ôÄÔ∏è –§–æ–Ω –ö+–†', `action-change-bg-any-${crID}`)
          ],
          [
            Markup.button.callback('‚ôªÔ∏è –§–æ–Ω —Ä–∞–Ω–¥–æ–º', `action-change-bg-random-${crID}`),
            Markup.button.callback('üìç –§–æ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π', `action-change-bg-exact-${crID}`),
          ],
          [
            Markup.button.callback('‚úÖ –ù–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', `action-emporium-confirm-${crID}`)
          ]
        ])
      }).then(nctx => {
        ctx.globalSession.emporium.queue[crID].lastBotMessageId = nctx.message_id;
      })
    }
    catch (err) {
      console.log(err);
      ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!')
    }

  } else {
    ctx.answerCbQuery('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤ –±–¥')
  }
})